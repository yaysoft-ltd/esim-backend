name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, bcmath, intl

    - name: Install Dependencies  
      run: composer install --optimize-autoloader --no-dev --no-scripts

    - name: Create deployment artifact
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

    - name: Store artifact for distribution
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: ${{ github.sha }}.tar.gz

    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT }}
        command_timeout: 10m
        script_stop: true
        envs: GITHUB_SHA
        script: |
          cd /var/www/esimtel
          
          # Create basic structure if first deployment
          mkdir -p releases
          
          # Create release directory
          RELEASE_DIR="releases/$GITHUB_SHA"
          mkdir -p "$RELEASE_DIR"
          
          # Download source code as tar.gz from GitHub
          curl -L -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/yaysoft-ltd/esim-backend/tarball/$GITHUB_SHA" \
            -o source.tar.gz
          
          # Extract to release directory
          tar -xzf source.tar.gz -C "$RELEASE_DIR" --strip-components=1
          rm source.tar.gz
          
          # Copy environment file
          cp .env "$RELEASE_DIR/.env"
          
          # Set permissions
          chown -R www-data:www-data "$RELEASE_DIR"
          chmod -R 755 "$RELEASE_DIR"
          chmod -R 775 "$RELEASE_DIR/storage" "$RELEASE_DIR/bootstrap/cache"
          
          # Install dependencies and optimize
          cd "$RELEASE_DIR"

          # Set composer environment variables to avoid timeout and root warnings
          export COMPOSER_ALLOW_SUPERUSER=1
          export COMPOSER_PROCESS_TIMEOUT=600

          composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist

          # Generate app key if not already set
          if grep -q "base64:GENERATE_NEW_KEY_ON_SERVER" .env; then
            php artisan key:generate --force
          fi

          # Clear old caches first
          php artisan config:clear || true
          php artisan route:clear || true
          php artisan view:clear || true
          php artisan cache:clear || true

          # Create storage link if not exists
          php artisan storage:link --force || true

          # Run migrations
          php artisan migrate --force || true

          # Optimize for production
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          # Switch to new release (zero-downtime)
          cd /var/www/esimtel
          ln -nfs "$RELEASE_DIR" current
          ln -nfs current public_html
          
          # Restart services
          supervisorctl restart laravel-worker:* || true
          systemctl reload nginx
          
          # Cleanup old releases (keep last 3)
          cd releases
          ls -t | tail -n +4 | xargs rm -rf
